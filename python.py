# python.py

import streamlit as st
import pandas as pd
import numpy as np
import io
from pydocx import PyDocx
from google import genai
from google.genai.errors import APIError

# --- H·∫∞NG S·ªê ---
# D√πng cho vi·ªác t√≠nh to√°n t√†i ch√≠nh
N_NAM_TOI_DA = 10 
# Danh s√°ch c√°c ch·ªâ ti√™u c·∫ßn tr√≠ch xu·∫•t
CHIEU_KHOA_CAN_LOC = [
    "V·ªën ƒë·∫ßu t∆∞ (Investment)", 
    "D√≤ng ƒë·ªùi d·ª± √°n (Project Life)", 
    "Doanh thu nƒÉm ƒë·∫ßu (Revenue Year 1)", 
    "Chi ph√≠ ho·∫°t ƒë·ªông nƒÉm ƒë·∫ßu (Operating Cost Year 1)", 
    "T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng h√†ng nƒÉm (Annual Growth Rate)", # Gi·∫£ ƒë·ªãnh t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng c·ªë ƒë·ªãnh
    "WACC/T·ª∑ su·∫•t chi·∫øt kh·∫•u (Discount Rate)", 
    "Thu·∫ø su·∫•t (Tax Rate)"
]

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh üìà")
st.caption("S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu, t√≠nh to√°n ch·ªâ s·ªë v√† ph√¢n t√≠ch hi·ªáu qu·∫£ d·ª± √°n.")

# --- Thi·∫øt l·∫≠p API Key ---
try:
    API_KEY = st.secrets["GEMINI_API_KEY"]
except KeyError:
    st.error("‚ö†Ô∏è **L·ªói C·∫•u h√¨nh:** Vui l√≤ng th√™m Kh√≥a API Gemini v√†o Streamlit Secrets v·ªõi t√™n bi·∫øn `GEMINI_API_KEY`.")
    st.stop()


# --- CH·ª®C NƒÇNG 1: TR√çCH XU·∫§T D·ªÆ LI·ªÜU T·ª™ FILE WORD D√ôNG AI ---
def extract_text_from_docx(uploaded_file):
    """ƒê·ªçc file docx v√† tr√≠ch xu·∫•t n·ªôi dung vƒÉn b·∫£n."""
    try:
        # pydocx c·∫ßn m·ªôt ƒë∆∞·ªùng d·∫´n file. Ch√∫ng ta t·∫°o file t·∫°m t·ª´ BytesIO
        with open("temp_doc.docx", "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # ƒê·ªçc n·ªôi dung HTML t·ª´ file t·∫°m, sau ƒë√≥ chuy·ªÉn sang vƒÉn b·∫£n thu·∫ßn t√∫y
        html = PyDocx().to_html(filename="temp_doc.docx")
        # Lo·∫°i b·ªè c√°c th·∫ª HTML ƒë·ªÉ l·∫•y vƒÉn b·∫£n thu·∫ßn t√∫y
        text_content = ' '.join(html.split()) 
        return text_content
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc file Word: {e}")
        return None

def ai_extract_financial_data(doc_text, api_key):
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ l·ªçc c√°c ch·ªâ ti√™u t√†i ch√≠nh t·ª´ vƒÉn b·∫£n."""
    
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ª± √°n kinh doanh. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh ch√≠nh x√°c t·ª´ vƒÉn b·∫£n d·ª± √°n d∆∞·ªõi ƒë√¢y.
    
    VƒÉn b·∫£n d·ª± √°n:
    ---
    {doc_text[:15000]} 
    ---
    
    Vui l√≤ng tr√≠ch xu·∫•t c√°c gi√° tr·ªã sau v√† tr·∫£ l·ªùi b·∫±ng m·ªôt **JSON duy nh·∫•t**. 
    N·∫øu kh√¥ng t√¨m th·∫•y ch·ªâ ti√™u n√†o, ƒë·∫∑t gi√° tr·ªã l√† 0 ho·∫∑c N/A.
    
    1. V·ªën ƒë·∫ßu t∆∞ (Investment): Gi√° tr·ªã ban ƒë·∫ßu, th∆∞·ªùng l√† chi ti√™u ·ªü NƒÉm 0.
    2. D√≤ng ƒë·ªùi d·ª± √°n (Project Life): S·ªë nƒÉm ho·∫°t ƒë·ªông (V√≠ d·ª•: 5 nƒÉm, 10 nƒÉm).
    3. Doanh thu nƒÉm ƒë·∫ßu (Revenue Year 1): Gi√° tr·ªã doanh thu d·ª± ki·∫øn trong nƒÉm ƒë·∫ßu ti√™n.
    4. Chi ph√≠ ho·∫°t ƒë·ªông nƒÉm ƒë·∫ßu (Operating Cost Year 1): Gi√° tr·ªã chi ph√≠ ho·∫°t ƒë·ªông, ch∆∞a t√≠nh kh·∫•u hao v√† thu·∫ø.
    5. T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng h√†ng nƒÉm (Annual Growth Rate): T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng c·ªë ƒë·ªãnh cho Doanh thu v√† Chi ph√≠ (V√≠ d·ª•: 5% ho·∫∑c 0.05).
    6. WACC/T·ª∑ su·∫•t chi·∫øt kh·∫•u (Discount Rate): T·ª∑ l·ªá chi·∫øt kh·∫•u d√πng ƒë·ªÉ t√≠nh NPV (V√≠ d·ª•: 10% ho·∫∑c 0.1).
    7. Thu·∫ø su·∫•t (Tax Rate): T·ª∑ l·ªá thu·∫ø thu nh·∫≠p doanh nghi·ªáp (V√≠ d·ª•: 20% ho·∫∑c 0.2).
    
    ƒê∆°n v·ªã ti·ªÅn t·ªá m·∫∑c ƒë·ªãnh l√† Vi·ªát Nam ƒê·ªìng (VND). B·ªè qua c√°c ƒë∆°n v·ªã ti·ªÅn t·ªá kh√°c trong ƒë·∫ßu ra.
    
    V√≠ d·ª• ƒë·ªãnh d·∫°ng JSON:
    {{
      "V·ªën ƒë·∫ßu t∆∞ (Investment)": 1000000000,
      "D√≤ng ƒë·ªùi d·ª± √°n (Project Life)": 5,
      "Doanh thu nƒÉm ƒë·∫ßu (Revenue Year 1)": 300000000,
      "Chi ph√≠ ho·∫°t ƒë·ªông nƒÉm ƒë·∫ßu (Operating Cost Year 1)": 150000000,
      "T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng h√†ng nƒÉm (Annual Growth Rate)": 0.05,
      "WACC/T·ª∑ su·∫•t chi·∫øt kh·∫•u (Discount Rate)": 0.12,
      "Thu·∫ø su·∫•t (Tax Rate)": 0.2
    }}
    """
    
    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt,
            config=genai.types.GenerateContentConfig(
                response_mime_type="application/json",
            ),
        )
        # S·ª≠ d·ª•ng eval/json.loads ƒë·ªÉ chuy·ªÉn chu·ªói JSON th√†nh Dict Python
        import json
        return json.loads(response.text)
    
    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh tr√≠ch xu·∫•t JSON: {e}")
        st.code(response.text if 'response' in locals() else "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi", language='json')
        return None

# --- CH·ª®C NƒÇNG 2 & 3: T√çNH TO√ÅN D√íNG TI·ªÄN V√Ä CH·ªà S·ªê ---

# H√†m gi√∫p chu·∫©n h√≥a ƒë·ªãnh d·∫°ng s·ªë cho ph√©p t√≠nh
def standardize_rate(value):
    """Chuy·ªÉn ƒë·ªïi gi√° tr·ªã t·ª∑ l·ªá (c√≥ th·ªÉ l√† % ho·∫∑c s·ªë th·∫≠p ph√¢n) sang s·ªë th·∫≠p ph√¢n."""
    if isinstance(value, (int, float)):
        # N·∫øu l√† gi√° tr·ªã l·ªõn h∆°n 1, gi·∫£ ƒë·ªãnh ƒë√≥ l√† % v√† chia cho 100
        return value / 100 if value > 1 else value
    return 0.0

@st.cache_data(show_spinner=False)
def calculate_project_metrics(data):
    """X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn v√† t√≠nh to√°n c√°c ch·ªâ s·ªë t√†i ch√≠nh."""
    
    # Chu·∫©n h√≥a v√† tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ AI
    v_dau_tu = data.get("V·ªën ƒë·∫ßu t∆∞ (Investment)", 0)
    n_nam = data.get("D√≤ng ƒë·ªùi d·ª± √°n (Project Life)", 0)
    doanh_thu_1 = data.get("Doanh thu nƒÉm ƒë·∫ßu (Revenue Year 1)", 0)
    chi_phi_hd_1 = data.get("Chi ph√≠ ho·∫°t ƒë·ªông nƒÉm ƒë·∫ßu (Operating Cost Year 1)", 0)
    toc_do_tang_truong = standardize_rate(data.get("T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng h√†ng nƒÉm (Annual Growth Rate)", 0))
    wacc = standardize_rate(data.get("WACC/T·ª∑ su·∫•t chi·∫øt kh·∫•u (Discount Rate)", 0))
    thue_suat = standardize_rate(data.get("Thu·∫ø su·∫•t (Tax Rate)", 0))
    
    if n_nam == 0 or wacc == 0:
        st.warning("D√≤ng ƒë·ªùi d·ª± √°n ho·∫∑c WACC kh√¥ng h·ª£p l·ªá. Kh√¥ng th·ªÉ t√≠nh to√°n.")
        return None, None

    # Gi·∫£ ƒë·ªãnh Kh·∫•u hao: Tuy kh√¥ng ƒë∆∞·ª£c l·ªçc, ta gi·∫£ ƒë·ªãnh Kh·∫•u hao ƒë∆∞·ªùng th·∫≥ng b·∫±ng V·ªën ƒë·∫ßu t∆∞ / D√≤ng ƒë·ªùi d·ª± √°n
    khau_hao = v_dau_tu / n_nam if n_nam > 0 else 0
    
    # 2. X√¢y d·ª±ng B·∫£ng D√≤ng Ti·ªÅn (Cash Flow)
    
    # Kh·ªüi t·∫°o b·∫£ng d√≤ng ti·ªÅn v·ªõi s·ªë nƒÉm c·∫ßn thi·∫øt (t·ª´ nƒÉm 0 ƒë·∫øn nƒÉm n_nam)
    years = list(range(n_nam + 1))
    df_cf = pd.DataFrame(index=years)
    
    # NƒÉm 0: Ch·ªâ c√≥ V·ªën ƒë·∫ßu t∆∞ (Outflow)
    df_cf.loc[0, 'Doanh thu'] = 0
    df_cf.loc[0, 'Chi ph√≠ ho·∫°t ƒë·ªông'] = 0
    df_cf.loc[0, 'V·ªën ƒë·∫ßu t∆∞'] = -v_dau_tu # Chi ti·ªÅn
    df_cf.loc[0, 'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)'] = 0
    df_cf.loc[0, 'Thu·∫ø'] = 0
    df_cf.loc[0, 'D√≤ng ti·ªÅn sau thu·∫ø (ATCF)'] = -v_dau_tu

    # C√°c NƒÉm 1 ƒë·∫øn N
    for year in range(1, n_nam + 1):
        # T√≠nh to√°n Doanh thu v√† Chi ph√≠ theo T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng
        revenue = doanh_thu_1 * ((1 + toc_do_tang_truong) ** (year - 1))
        op_cost = chi_phi_hd_1 * ((1 + toc_do_tang_truong) ** (year - 1))
        
        # 1. L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT = Doanh thu - Chi ph√≠ ho·∫°t ƒë·ªông - Kh·∫•u hao)
        ebt = revenue - op_cost - khau_hao
        
        # 2. Thu·∫ø (Tax)
        tax = max(0, ebt * thue_suat)
        
        # 3. L·ª£i nhu·∫≠n sau thu·∫ø (EAT)
        eat = ebt - tax
        
        # 4. D√≤ng ti·ªÅn sau thu·∫ø (ATCF = EAT + Kh·∫•u hao - V·ªën ƒë·∫ßu t∆∞ b·ªï sung)
        # Trong m√¥ h√¨nh c∆° b·∫£n n√†y, kh√¥ng c√≥ v·ªën ƒë·∫ßu t∆∞ b·ªï sung hay gi√° tr·ªã thanh l√Ω cu·ªëi k·ª≥
        atcf = eat + khau_hao
        
        # Ghi v√†o DataFrame
        df_cf.loc[year, 'Doanh thu'] = revenue
        df_cf.loc[year, 'Chi ph√≠ ho·∫°t ƒë·ªông'] = op_cost
        df_cf.loc[year, 'Kh·∫•u hao (Gi·∫£ ƒë·ªãnh)'] = khau_hao # Th√™m d√≤ng kh·∫•u hao ƒë·ªÉ ti·ªán theo d√µi
        df_cf.loc[year, 'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)'] = ebt
        df_cf.loc[year, 'Thu·∫ø'] = tax
        df_cf.loc[year, 'D√≤ng ti·ªÅn sau thu·∫ø (ATCF)'] = atcf

    # 3. T√≠nh to√°n c√°c ch·ªâ s·ªë
    cf_values = df_cf['D√≤ng ti·ªÅn sau thu·∫ø (ATCF)'].values
    
    # a. NPV (Net Present Value)
    npv_value = np.npv(wacc, cf_values)
    
    # b. IRR (Internal Rate of Return)
    try:
        irr_value = np.irr(cf_values)
    except:
        irr_value = np.nan
        
    # c. PP (Payback Period) v√† DPP (Discounted Payback Period)
    
    # T√≠nh T·ªïng d√≤ng ti·ªÅn t√≠ch l≈©y v√† D√≤ng ti·ªÅn chi·∫øt kh·∫•u t√≠ch l≈©y
    df_cf['D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)'] = df_cf['D√≤ng ti·ªÅn sau thu·∫ø (ATCF)'] / ((1 + wacc) ** df_cf.index)
    
    # Ghi ƒë√® nƒÉm 0 b·∫±ng gi√° tr·ªã ATCF c·ªßa n√≥ ƒë·ªÉ t√≠nh t√≠ch l≈©y ƒë√∫ng
    df_cf.loc[0, 'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)'] = df_cf.loc[0, 'D√≤ng ti·ªÅn sau thu·∫ø (ATCF)'] 
    
    df_cf['T·ªïng t√≠ch l≈©y (Cum. CF)'] = df_cf['D√≤ng ti·ªÅn sau thu·∫ø (ATCF)'].cumsum()
    df_cf['T·ªïng t√≠ch l≈©y Chi·∫øt kh·∫•u (Cum. DCF)'] = df_cf['D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)'].cumsum()
    
    # T√¨m PP v√† DPP
    
    # PP
    cf_cum = df_cf['T·ªïng t√≠ch l≈©y (Cum. CF)']
    pp_year_before = cf_cum[cf_cum < 0].index.max() # NƒÉm cu·ªëi c√πng m√† t√≠ch l≈©y c√≤n √¢m
    if pp_year_before is np.nan:
        pp_value = 0 # Ho√†n v·ªën ngay
    elif pp_year_before < n_nam:
        # PP = NƒÉm tr∆∞·ªõc + |T·ªïng t√≠ch l≈©y nƒÉm tr∆∞·ªõc| / D√≤ng ti·ªÅn nƒÉm ƒë√≥
        pp_value = pp_year_before + (abs(cf_cum.loc[pp_year_before]) / df_cf.loc[pp_year_before + 1, 'D√≤ng ti·ªÅn sau thu·∫ø (ATCF)'])
    else:
        pp_value = np.inf # Kh√¥ng ho√†n v·ªën trong d√≤ng ƒë·ªùi d·ª± √°n

    # DPP
    dcf_cum = df_cf['T·ªïng t√≠ch l≈©y Chi·∫øt kh·∫•u (Cum. DCF)']
    dpp_year_before = dcf_cum[dcf_cum < 0].index.max()
    if dpp_year_before is np.nan:
        dpp_value = 0 # Ho√†n v·ªën ngay
    elif dpp_year_before < n_nam:
        # DPP = NƒÉm tr∆∞·ªõc + |T·ªïng t√≠ch l≈©y Chi·∫øt kh·∫•u nƒÉm tr∆∞·ªõc| / D√≤ng ti·ªÅn Chi·∫øt kh·∫•u nƒÉm ƒë√≥
        dpp_value = dpp_year_before + (abs(dcf_cum.loc[dpp_year_before]) / df_cf.loc[dpp_year_before + 1, 'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)'])
    else:
        dpp_value = np.inf
        
    # Chu·∫©n h√≥a hi·ªÉn th·ªã NPV, IRR, PP, DPP
    metrics = {
        "NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)": npv_value,
        "IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)": irr_value,
        "PP (Th·ªùi gian ho√†n v·ªën)": pp_value,
        "DPP (Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u)": dpp_value,
        "WACC (T·ª∑ su·∫•t chi·∫øt kh·∫•u)": wacc
    }
    
    return df_cf, metrics


# --- CH·ª®C NƒÇNG 4: PH√ÇN T√çCH CH·ªà S·ªê B·∫∞NG AI ---
def ai_analyze_metrics(metrics, wacc, api_key):
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ ph√¢n t√≠ch c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n."""
    
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh d·ª± √°n t√†i ch√≠nh. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ c·ªßa d·ª± √°n d∆∞·ªõi ƒë√¢y, h√£y ƒë∆∞a ra nh·∫≠n x√©t chi ti·∫øt v√† chuy√™n s√¢u, t·∫≠p trung v√†o t√≠nh kh·∫£ thi v√† r·ªßi ro c·ªßa d·ª± √°n.
    
    C√°c ch·ªâ s·ªë c·∫ßn ph√¢n t√≠ch:
    1. NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng): {metrics.get('NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)', 'N/A'):,.0f} VND
    2. IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô): {metrics.get('IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)', np.nan) * 100:.2f}%
    3. WACC (T·ª∑ su·∫•t chi·∫øt kh·∫•u): {wacc * 100:.2f}%
    4. PP (Th·ªùi gian ho√†n v·ªën): {metrics.get('PP (Th·ªùi gian ho√†n v·ªën)', np.nan):.2f} nƒÉm
    5. DPP (Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u): {metrics.get('DPP (Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u)', np.nan):.2f} nƒÉm
    
    Y√™u c·∫ßu ph√¢n t√≠ch:
    - **NPV & IRR:** ƒê√°nh gi√° t√≠nh kh·∫£ thi (NPV > 0 v√† IRR > WACC). 
    - **Th·ªùi gian ho√†n v·ªën:** So s√°nh PP v√† DPP v·ªõi D√≤ng ƒë·ªùi d·ª± √°n. Nh·∫•n m·∫°nh s·ª± kh√°c bi·ªát gi·ªØa PP v√† DPP.
    - **K·∫øt lu·∫≠n:** T√≥m t·∫Øt ng·∫Øn g·ªçn n√™n *ch·∫•p nh·∫≠n* hay *t·ª´ ch·ªëi* d·ª± √°n n√†y v√† l√Ω do ch√≠nh.
    - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
    """
    
    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text
    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh ph√¢n t√≠ch: {e}"

# ===============================================
# --- LOGIC CH√çNH C·ª¶A STREAMLIT APP ---
# ===============================================

# --- Khu v·ª±c T·∫£i File (Ch·ª©c nƒÉng 1) ---
uploaded_file = st.file_uploader(
    "1. T·∫£i file Word (.docx) ch·ª©a Ph∆∞∆°ng √°n Kinh doanh",
    type=['docx']
)

# S·ª≠ d·ª•ng Streamlit Session State ƒë·ªÉ l∆∞u d·ªØ li·ªáu ƒë√£ l·ªçc v√† c√°c ch·ªâ s·ªë
if 'extracted_data' not in st.session_state:
    st.session_state['extracted_data'] = None
if 'cash_flow_df' not in st.session_state:
    st.session_state['cash_flow_df'] = None
if 'metrics' not in st.session_state:
    st.session_state['metrics'] = None

if uploaded_file is not None:
    # --- Ch·ª©c nƒÉng 1: L·ªçc d·ªØ li·ªáu ---
    if st.button("Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh (AI)", key="btn_extract", use_container_width=True):
        doc_text = extract_text_from_docx(uploaded_file)
        if doc_text:
            with st.spinner('ƒêang g·ª≠i vƒÉn b·∫£n t·ªõi Gemini AI ƒë·ªÉ tr√≠ch xu·∫•t c√°c th√¥ng s·ªë...'):
                extracted_data = ai_extract_financial_data(doc_text, API_KEY)
                st.session_state['extracted_data'] = extracted_data
                st.session_state['cash_flow_df'] = None # X√≥a k·∫øt qu·∫£ c≈©
                st.session_state['metrics'] = None
                
    if st.session_state['extracted_data']:
        st.divider()
        st.subheader("1. Th√¥ng s·ªë T√†i ch√≠nh ƒë√£ Tr√≠ch xu·∫•t (AI) ü§ñ")
        
        # Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng DataFrame cho d·ªÖ nh√¨n
        df_extracted = pd.Series(st.session_state['extracted_data']).to_frame('Gi√° tr·ªã')
        st.dataframe(df_extracted, use_container_width=True)
        
        # --- Ch·ª©c nƒÉng 2 & 3: T√≠nh to√°n D√≤ng ti·ªÅn v√† Ch·ªâ s·ªë ---
        try:
            df_cf, metrics = calculate_project_metrics(st.session_state['extracted_data'])
            st.session_state['cash_flow_df'] = df_cf
            st.session_state['metrics'] = metrics
            
            # --- Hi·ªÉn th·ªã K·∫øt qu·∫£ ---
            
            # B·∫£ng D√≤ng ti·ªÅn (Ch·ª©c nƒÉng 2)
            st.subheader("2. B·∫£ng D√≤ng ti·ªÅn D·ª± √°n (Cash Flow Statement)")
            st.dataframe(df_cf.style.format({
                'Doanh thu': '{:,.0f}',
                'Chi ph√≠ ho·∫°t ƒë·ªông': '{:,.0f}',
                'Kh·∫•u hao (Gi·∫£ ƒë·ªãnh)': '{:,.0f}',
                'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)': '{:,.0f}',
                'Thu·∫ø': '{:,.0f}',
                'D√≤ng ti·ªÅn sau thu·∫ø (ATCF)': '{:,.0f}',
                'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)': '{:,.0f}',
                'T·ªïng t√≠ch l≈©y (Cum. CF)': '{:,.0f}',
                'T·ªïng t√≠ch l≈©y Chi·∫øt kh·∫•u (Cum. DCF)': '{:,.0f}'
            }), use_container_width=True)

            # C√°c Ch·ªâ s·ªë ƒê√°nh gi√° (Ch·ª©c nƒÉng 3)
            st.subheader("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
            
            col1, col2, col3, col4 = st.columns(4)
            wacc_rate = metrics['WACC (T·ª∑ su·∫•t chi·∫øt kh·∫•u)']
            
            with col1:
                st.metric(
                    label="NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)", 
                    value=f"{metrics['NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)']:,.0f} VND",
                    delta="D·ª± √°n KH·∫¢ THI" if metrics['NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)'] > 0 else "D·ª± √°n KH√îNG KH·∫¢ THI"
                )
            with col2:
                st.metric(
                    label="IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)", 
                    value=f"{metrics['IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)'] * 100:.2f}%",
                    delta="IRR > WACC" if metrics['IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)'] > wacc_rate else "IRR < WACC"
                )
            with col3:
                st.metric(label="PP (Th·ªùi gian ho√†n v·ªën)", value=f"{metrics['PP (Th·ªùi gian ho√†n v·ªën)']:.2f} nƒÉm")
            with col4:
                st.metric(label="DPP (Ho√†n v·ªën chi·∫øt kh·∫•u)", value=f"{metrics['DPP (Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u)']:.2f} nƒÉm")
                
            st.info(f"T·ª∑ su·∫•t chi·∫øt kh·∫•u (WACC) ƒëang s·ª≠ d·ª•ng: **{wacc_rate * 100:.2f}%**")
                
            st.divider()
            
            # --- Ch·ª©c nƒÉng 4: Ph√¢n t√≠ch AI ---
            st.subheader("4. Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n (AI) üß†")
            if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë", key="btn_analyze", type="primary", use_container_width=True):
                with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                    ai_result = ai_analyze_metrics(metrics, wacc_rate, API_KEY)
                    st.session_state['ai_analysis'] = ai_result
            
            if 'ai_analysis' in st.session_state and st.session_state['ai_analysis']:
                st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                st.info(st.session_state['ai_analysis'])


        except Exception as e:
            st.error(f"L·ªói trong qu√° tr√¨nh t√≠nh to√°n D√≤ng ti·ªÅn/Ch·ªâ s·ªë: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu tr√≠ch xu·∫•t.")
            st.session_state['cash_flow_df'] = None
            st.session_state['metrics'] = None
            
else:
    st.info("Vui l√≤ng t·∫£i l√™n file Word ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë√°nh gi√°.")
